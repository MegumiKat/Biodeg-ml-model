{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP8i7v7X3BgWXy56Niiipoq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#!!!! Random Forest with all the data from Excel\n","\n","import pandas as pd\n","import numpy as np   # numerical calcul\n","from sklearn.model_selection import train_test_split  # divided in train and test split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay\n","from sklearn.metrics import accuracy_score, classification_report  # to evaluate the model\n","from sklearn.metrics import r2_score # give the r2 of the model\n","\n","# Lire le fichier Excel\n","df = pd.read_excel(\"Augusttest.xlsx\")\n","df.rename(columns={'Composition (%)': 'CHDA', 'Unnamed: 2': 'EG', 'Unnamed: 3': 'SSIA', 'Unnamed: 4': 'SSIT' , 'Unnamed: 5': 'PDA' , 'Unnamed: 6': 'Quat-PDA' , 'Unnamed: 7': 'PET', 'Unnamed: 8': 'LA' , 'Unnamed: 9': 'TMA'}, inplace=True)\n","df.rename(columns={'Unnamed: 10': 'CHDM', 'Unnamed: 11': 'FUGLA', 'Unnamed: 12': 'CHGLA', 'Unnamed: 13': 'BHET' , 'Unnamed: 14': 'NPG' , 'Unnamed: 15': 'TA' , 'Unnamed: 16': 'FDCA', 'Unnamed: 17': 'FDME' , 'Unnamed: 18': 'Ad'}, inplace=True)\n","df.rename(columns={'301F test result\\n(28D)': '301F test result 30D', '301F test result\\n(60D)': '301F test result 60D'}, inplace=True)\n","\n","# Supprimer les lignes inutiles (les 3 suivantes après la ligne fusionnée)\n","df = df.drop(index=[0, 1, 2])\n","\n","#df.fillna({\"Calories\": 0}, inplace=True) # replace NaN by 0 in the selected columns (possible to put many columns in one code line ?)\n","df.fillna({\"CHDA\": 0, \"EG\": 0, \"SSIA\":0, \"SSIT\":0, \"PDA\":0, \"Quat-PDA\":0, \"PET\": 0, \"LA\": 0, \"TMA\": 0, \"CHDM\": 0, \"FUGLA\": 0, \"CHGLA\": 0, \"BHET\": 0, \"NPG\": 0, \"TA\": 0, \"FDCA\": 0, \"FDME\": 0, \"Ad\": 0}, inplace=True)\n","\n","print(\"Which biodegradability do you want to predict ? 302B, 301F30D or 301F60D\")\n","choice = input()\n","\n","if choice == \"302B\" or choice == \"302b\":\n","  df = df.dropna(subset=['302B test result'])  #or '302B_test_result'\n","  features = [\"CHDA\",\"EG\",\"SSIA\",\"SSIT\",\"PDA\",\"Quat-PDA\",\"PET\",\"LA\",\"TMA\",\"CHDM\",\"FUGLA\",\"CHGLA\",\"BHET\",\"NPG\",\"TA\",\"FDCA\",\"FDME\",\"Ad\"]\n","  X = df[features]\n","  y = df[\"302B test result\"]\n","elif choice == \"301F30D\" or choice == \"301f30d\" or choice == \"301F30d\" or choice == \"301f30D\" or choice == \"30d\" or choice == \"30D\":\n","  df = df.dropna(subset=['301F test result 30D'])  #or '301F_test_result_30D'\n","  features = [\"CHDA\",\"EG\",\"SSIA\",\"SSIT\",\"PDA\",\"Quat-PDA\",\"PET\",\"LA\",\"TMA\",\"CHDM\",\"FUGLA\",\"CHGLA\",\"BHET\",\"NPG\",\"TA\",\"FDCA\",\"FDME\",\"Ad\"]\n","  X = df[features]\n","  y = df[\"301F test result 30D\"]\n","elif choice == \"301F60D\" or choice == \"301f60d\" or choice == \"301F60d\" or choice == \"301f60D\" or choice == \"60d\" or choice == \"60D\" :\n","  df = df.dropna(subset=['301F test result 60D'])  #or '301F_test_result_60D'\n","  features = [\"CHDA\",\"EG\",\"SSIA\",\"SSIT\",\"PDA\",\"Quat-PDA\",\"PET\",\"LA\",\"TMA\",\"CHDM\",\"FUGLA\",\"CHGLA\",\"BHET\",\"NPG\",\"TA\",\"FDCA\",\"FDME\",\"Ad\"]\n","  X = df[features]\n","  y = df[\"301F test result 60D\"]\n","else :\n","  print(\"please choose a name among the 3 possibilities or be sure to write it as the same way as in the previous list\")\n","  #exit()  #it is really useful to crash the program since there is no action after ?\n","\n","X_train, X_test, y_train, y_test = train_test_split(X.values, y, test_size=0.25, random_state=42) # creation of the different set #X.values remove the warning so it's perfect\n","\n","print('size of train set:', X_train.shape)\n","print('size of test set:', X_test.shape)\n","\n","rf = RandomForestRegressor(100)\n","rf.fit(X_train, y_train)\n","y_pred = rf.predict(X_test)\n","\n","print('accuracy of the tree is', r2_score(y_test, y_pred)*100)\n","print('et voila')\n","print((rf.predict([[36.3,45.45,4.54,0,4.54,0,0,9.09,0,0,0,0,0,0,0,0,0,0]]))*100)\n","\n","#print(df)\n","#print(df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lij2V8ivuN00","executionInfo":{"status":"ok","timestamp":1756798956340,"user_tz":-480,"elapsed":4225,"user":{"displayName":"Julian Coeurdassier","userId":"14906134986017091730"}},"outputId":"94dc54af-9edc-4c03-877c-68d32f609237"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-1518707683.py:22: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df.fillna({\"CHDA\": 0, \"EG\": 0, \"SSIA\":0, \"SSIT\":0, \"PDA\":0, \"Quat-PDA\":0, \"PET\": 0, \"LA\": 0, \"TMA\": 0, \"CHDM\": 0, \"FUGLA\": 0, \"CHGLA\": 0, \"BHET\": 0, \"NPG\": 0, \"TA\": 0, \"FDCA\": 0, \"FDME\": 0, \"Ad\": 0}, inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["Which biodegradability do you want to predict ? 302B, 301F30D or 301F60D\n","302b\n","size of train set: (112, 18)\n","size of test set: (38, 18)\n","accuracy of the tree is 42.35281458697534\n","et voila\n","[87.21928098]\n"]}]},{"cell_type":"code","source":["#!!!! Random Forest with all the data from Excel with manual enter for each data !!!!!!\n","\n","import pandas as pd\n","import numpy as np   # numerical calcul\n","from sklearn.model_selection import train_test_split  # divided in train and test split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay\n","from sklearn.metrics import accuracy_score, classification_report  # to evaluate the model\n","from sklearn.metrics import r2_score # give the r2 of the model\n","\n","# Lire le fichier Excel\n","df = pd.read_excel(\"Augusttest.xlsx\")\n","df.rename(columns={'Composition (%)': 'CHDA', 'Unnamed: 2': 'EG', 'Unnamed: 3': 'SSIA', 'Unnamed: 4': 'SSIT' , 'Unnamed: 5': 'PDA' , 'Unnamed: 6': 'Quat-PDA' , 'Unnamed: 7': 'PET', 'Unnamed: 8': 'LA' , 'Unnamed: 9': 'TMA'}, inplace=True)\n","df.rename(columns={'Unnamed: 10': 'CHDM', 'Unnamed: 11': 'FUGLA', 'Unnamed: 12': 'CHGLA', 'Unnamed: 13': 'BHET' , 'Unnamed: 14': 'NPG' , 'Unnamed: 15': 'TA' , 'Unnamed: 16': 'FDCA', 'Unnamed: 17': 'FDME' , 'Unnamed: 18': 'Ad'}, inplace=True)\n","df.rename(columns={'301F test result\\n(28D)': '301F test result 30D', '301F test result\\n(60D)': '301F test result 60D'}, inplace=True)\n","\n","# Supprimer les lignes inutiles (les 3 suivantes après la ligne fusionnée)\n","df = df.drop(index=[0, 1, 2])\n","\n","#df.fillna({\"Calories\": 0}, inplace=True) # replace NaN by 0 in the selected columns (possible to put many columns in one code line ?)\n","df.fillna({\"CHDA\": 0, \"EG\": 0, \"SSIA\":0, \"SSIT\":0, \"PDA\":0, \"Quat-PDA\":0, \"PET\": 0, \"LA\": 0, \"TMA\": 0, \"CHDM\": 0, \"FUGLA\": 0, \"CHGLA\": 0, \"BHET\": 0, \"NPG\": 0, \"TA\": 0, \"FDCA\": 0, \"FDME\": 0, \"Ad\": 0}, inplace=True)\n","\n","print(\"Which biodegradability do you want to predict ? 302B, 301F30D or 301F60D\")\n","choice = input()\n","\n","if choice == \"302B\" or choice == \"302b\":\n","  df = df.dropna(subset=['302B test result'])  #or '302B_test_result'\n","  features = [\"CHDA\",\"EG\",\"SSIA\",\"SSIT\",\"PDA\",\"Quat-PDA\",\"PET\",\"LA\",\"TMA\",\"CHDM\",\"FUGLA\",\"CHGLA\",\"BHET\",\"NPG\",\"TA\",\"FDCA\",\"FDME\",\"Ad\"]\n","  X = df[features]\n","  y = df[\"302B test result\"]\n","elif choice == \"301F30D\" or choice == \"301f30d\" or choice == \"301F30d\" or choice == \"301f30D\" :\n","  df = df.dropna(subset=['301F test result 30D'])  #or '301F_test_result_30D'\n","  features = [\"CHDA\",\"EG\",\"SSIA\",\"SSIT\",\"PDA\",\"Quat-PDA\",\"PET\",\"LA\",\"TMA\",\"CHDM\",\"FUGLA\",\"CHGLA\",\"BHET\",\"NPG\",\"TA\",\"FDCA\",\"FDME\",\"Ad\"]\n","  X = df[features]\n","  y = df[\"301F test result 30D\"]\n","elif choice == \"301F60D\" or choice == \"301f60d\" or choice == \"301F60d\" or choice == \"301f60D\" :\n","  df = df.dropna(subset=['301F test result 60D'])  #or '301F_test_result_60D'\n","  features = [\"CHDA\",\"EG\",\"SSIA\",\"SSIT\",\"PDA\",\"Quat-PDA\",\"PET\",\"LA\",\"TMA\",\"CHDM\",\"FUGLA\",\"CHGLA\",\"BHET\",\"NPG\",\"TA\",\"FDCA\",\"FDME\",\"Ad\"]\n","  X = df[features]\n","  y = df[\"301F test result 60D\"]\n","else :\n","  print(\"please choose a name among the 3 possibilities or be sure to write it as the same way as in the previous list\")\n","  #exit()  #it is really useful to crash the program since there is no action after ?\n","\n","A = float(input(\"% of CHDA :\"))\n","B = float(input(\"% of EG :\" ))\n","C = float(input(\"% of SSIA :\"))\n","D = float(input(\"% of SSIT :\"))\n","E = float(input(\"% of PDA :\"))\n","F = float(input(\"% of Quat-PDA :\"))\n","G = float(input(\"% of PET :\"))\n","H = float(input(\"% of LA :\"))\n","I = float(input(\"% of TMA :\"))\n","J = float(input(\"% of CHDM :\"))\n","K = float(input(\"% of FUGLA :\"))\n","L = float(input(\"% of CHGLA :\"))\n","M = float(input(\"% of BHET :\"))\n","N = float(input(\"% of NPG :\"))\n","O = float(input(\"% of TA :\"))\n","P = float(input(\"% of FDCA :\"))\n","Q = float(input(\"% of FDME :\"))\n","R = float(input(\"% of Ad :\"))\n","\n","check = A+B+C+D+E+F+G+H+I+J+K+L+M+N+O+P+Q+R\n","if check == 100 :\n","  X_train, X_test, y_train, y_test = train_test_split(X.values, y, test_size=0.25, random_state=42) # creation of the different set #X.values remove the warning so it's perfect\n","  print('size of train set:', X_train.shape)\n","  print('size of test set:', X_test.shape)\n","  rf = RandomForestRegressor(100)\n","  rf.fit(X_train, y_train)\n","  y_pred = rf.predict(X_test)\n","  print('accuracy of the tree is', r2_score(y_test, y_pred)*100)\n","  #!!!!!!!!!!! Place a la prediction\n","  print('et voila')\n","  print(rf.predict([[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]]))\n","else:\n","    print(\"the sum of % is:\", check)\n","    print(\"please enter again the data and be sure the sum is 100\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5kOiwcwdR_r1","executionInfo":{"status":"ok","timestamp":1756801080388,"user_tz":-480,"elapsed":29130,"user":{"displayName":"Julian Coeurdassier","userId":"14906134986017091730"}},"outputId":"7bbf1bae-a706-4e0f-b229-5b4b54616f17"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-842923558.py:22: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df.fillna({\"CHDA\": 0, \"EG\": 0, \"SSIA\":0, \"SSIT\":0, \"PDA\":0, \"Quat-PDA\":0, \"PET\": 0, \"LA\": 0, \"TMA\": 0, \"CHDM\": 0, \"FUGLA\": 0, \"CHGLA\": 0, \"BHET\": 0, \"NPG\": 0, \"TA\": 0, \"FDCA\": 0, \"FDME\": 0, \"Ad\": 0}, inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["Which biodegradability do you want to predict ? 302B, 301F30D or 301F60D\n","302b\n","% of CHDA :50\n","% of EG :50\n","% of SSIA :0\n","% of SSIT :0\n","% of PDA :0\n","% of Quat-PDA :0\n","% of PET :0\n","% of LA :0\n","% of TMA :0\n","% of CHDM :0\n","% of FUGLA :0\n","% of CHGLA :0\n","% of BHET :0\n","% of NPG :0\n","% of TA :0\n","% of FDCA :0\n","% of FDME :0\n","% of Ad :0\n","size of train set: (112, 18)\n","size of test set: (38, 18)\n","accuracy of the tree is 41.398622565448875\n","et voila\n","[0.92920571]\n"]}]},{"cell_type":"code","source":["#!!!! Random Forest with all the data from Excel manual enter a general one for all the data !!!!\n","\n","import pandas as pd\n","import numpy as np   # numerical calcul\n","from sklearn.model_selection import train_test_split  # divided in train and test split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay\n","from sklearn.metrics import accuracy_score, classification_report  # to evaluate the model\n","from sklearn.metrics import r2_score # give the r2 of the model\n","\n","# Lire le fichier Excel\n","df = pd.read_excel(\"Augusttest.xlsx\")\n","df.rename(columns={'Composition (%)': 'CHDA', 'Unnamed: 2': 'EG', 'Unnamed: 3': 'SSIA', 'Unnamed: 4': 'SSIT' , 'Unnamed: 5': 'PDA' , 'Unnamed: 6': 'Quat-PDA' , 'Unnamed: 7': 'PET', 'Unnamed: 8': 'LA' , 'Unnamed: 9': 'TMA'}, inplace=True)\n","df.rename(columns={'Unnamed: 10': 'CHDM', 'Unnamed: 11': 'FUGLA', 'Unnamed: 12': 'CHGLA', 'Unnamed: 13': 'BHET' , 'Unnamed: 14': 'NPG' , 'Unnamed: 15': 'TA' , 'Unnamed: 16': 'FDCA', 'Unnamed: 17': 'FDME' , 'Unnamed: 18': 'Ad'}, inplace=True)\n","df.rename(columns={'301F test result\\n(28D)': '301F test result 30D', '301F test result\\n(60D)': '301F test result 60D'}, inplace=True)\n","\n","# Supprimer les lignes inutiles (les 3 suivantes après la ligne fusionnée)\n","df = df.drop(index=[0, 1, 2])\n","\n","#df.fillna({\"Calories\": 0}, inplace=True) # replace NaN by 0 in the selected columns (possible to put many columns in one code line ?)\n","df.fillna({\"CHDA\": 0, \"EG\": 0, \"SSIA\":0, \"SSIT\":0, \"PDA\":0, \"Quat-PDA\":0, \"PET\": 0, \"LA\": 0, \"TMA\": 0, \"CHDM\": 0, \"FUGLA\": 0, \"CHGLA\": 0, \"BHET\": 0, \"NPG\": 0, \"TA\": 0, \"FDCA\": 0, \"FDME\": 0, \"Ad\": 0}, inplace=True)\n","\n","print(\"Which biodegradability do you want to predict ? 302B, 301F30D or 301F60D\")\n","choice = input()\n","\n","if choice == \"302B\" or choice == \"302b\":\n","  df = df.dropna(subset=['302B test result'])  #or '302B_test_result'\n","  features = [\"CHDA\",\"EG\",\"SSIA\",\"SSIT\",\"PDA\",\"Quat-PDA\",\"PET\",\"LA\",\"TMA\",\"CHDM\",\"FUGLA\",\"CHGLA\",\"BHET\",\"NPG\",\"TA\",\"FDCA\",\"FDME\",\"Ad\"]\n","  X = df[features]\n","  y = df[\"302B test result\"]\n","elif choice == \"301F30D\" or choice == \"301f30d\" or choice == \"301F30d\" or choice == \"301f30D\" :\n","  df = df.dropna(subset=['301F test result 30D'])  #or '301F_test_result_30D'\n","  features = [\"CHDA\",\"EG\",\"SSIA\",\"SSIT\",\"PDA\",\"Quat-PDA\",\"PET\",\"LA\",\"TMA\",\"CHDM\",\"FUGLA\",\"CHGLA\",\"BHET\",\"NPG\",\"TA\",\"FDCA\",\"FDME\",\"Ad\"]\n","  X = df[features]\n","  y = df[\"301F test result 30D\"]\n","elif choice == \"301F60D\" or choice == \"301f60d\" or choice == \"301F60d\" or choice == \"301f60D\" :\n","  df = df.dropna(subset=['301F test result 60D'])  #or '301F_test_result_60D'\n","  features = [\"CHDA\",\"EG\",\"SSIA\",\"SSIT\",\"PDA\",\"Quat-PDA\",\"PET\",\"LA\",\"TMA\",\"CHDM\",\"FUGLA\",\"CHGLA\",\"BHET\",\"NPG\",\"TA\",\"FDCA\",\"FDME\",\"Ad\"]\n","  X = df[features]\n","  y = df[\"301F test result 60D\"]\n","else :\n","  print(\"please choose a name among the 3 possibilities or be sure to write it as the same way as in the previous list\")\n","  #exit()  #it is really useful to crash the program since there is no action after ?\n","\n","#entrees = list(map(int, input(\"enter the % in the right order and separate the number with a comma, : \").split(',')))\n","entrees = list(map(float, input(\"enter the % in the right order and separate the number with a comma, : \").split(',')))\n","#print(entrees)\n","check = len(entrees)\n","#print(check)\n","\n","if check==18:\n","  somme = sum(entrees)\n","  #print(somme)\n","  if somme==100:\n","      X_train, X_test, y_train, y_test = train_test_split(X.values, y, test_size=0.25, random_state=42) # creation of the different set #X.values remove the warning so it's perfect\n","      print('size of train set:', X_train.shape)\n","      print('size of test set:', X_test.shape)\n","      rf = RandomForestRegressor(100)\n","      rf.fit(X_train, y_train)\n","      y_pred = rf.predict(X_test)\n","      print('accuracy of the tree is', r2_score(y_test, y_pred)*100)\n","      #!!!!!!!!!!! Place a la prediction\n","      print('et voila')\n","      print(rf.predict([entrees])*100)\n","  else:\n","      print(\"total is not 100 % please try again\")\n","else:\n","  print(\"the number of components is not 18 please try again\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"anVK0Sw_Spkg","executionInfo":{"status":"ok","timestamp":1756800575174,"user_tz":-480,"elapsed":42468,"user":{"displayName":"Julian Coeurdassier","userId":"14906134986017091730"}},"outputId":"90ac254b-b0b9-4087-c2d7-49731d5e9051"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-998250924.py:22: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df.fillna({\"CHDA\": 0, \"EG\": 0, \"SSIA\":0, \"SSIT\":0, \"PDA\":0, \"Quat-PDA\":0, \"PET\": 0, \"LA\": 0, \"TMA\": 0, \"CHDM\": 0, \"FUGLA\": 0, \"CHGLA\": 0, \"BHET\": 0, \"NPG\": 0, \"TA\": 0, \"FDCA\": 0, \"FDME\": 0, \"Ad\": 0}, inplace=True)\n"]},{"output_type":"stream","name":"stdout","text":["Which biodegradability do you want to predict ? 302B, 301F30D or 301F60D\n","302b\n","enter the % in the right order and separate the number with a comma, : 40,32,10,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0\n","size of train set: (112, 18)\n","size of test set: (38, 18)\n","accuracy of the tree is 44.17127823730671\n","et voila\n","[55.64413203]\n"]}]}]}